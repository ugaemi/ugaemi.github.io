{"componentChunkName":"component---src-templates-blog-post-js","path":"/sql/Finding-an-adoption-time/","result":{"data":{"site":{"siteMetadata":{"title":"개미의 개발노트","author":"ugaemi","siteUrl":"http://ugaemi.com","comment":{"disqusShortName":"","utterances":"ugaemi/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"cdb39afa-acf0-53ac-b789-f69b1bbb5b21","excerpt":"문제  테이블은 동물 보호소에서 입양 보낸 동물의 정보를 담은 테이블입니다.\n 테이블 구조는 다음과 같으며, , , , , 는 각각 동물의 아이디, 생물 종, 입양일, 이름, 성별 및 중성화 여부를 나타냅니다. NAME TYPE NULLABLE ANIMAL_ID VARCHAR(N) FALSE ANIMAL_TYPE VARCHAR(N) FALSE DATETIME DATETIME FALSE NAME VARCHAR(N) TRUE SEXUPONOUTCOME VARCHAR(N) FALSE…","html":"<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<blockquote>\n<p><code class=\"language-text\">ANIMAL_OUTS</code> 테이블은 동물 보호소에서 입양 보낸 동물의 정보를 담은 테이블입니다.\n<code class=\"language-text\">ANIMAL_OUTS</code> 테이블 구조는 다음과 같으며, <code class=\"language-text\">ANIMAL_ID</code>, <code class=\"language-text\">ANIMAL_TYPE</code>, <code class=\"language-text\">DATETIME</code>, <code class=\"language-text\">NAME</code>, <code class=\"language-text\">SEX_UPON_OUTCOME</code>는 각각 동물의 아이디, 생물 종, 입양일, 이름, 성별 및 중성화 여부를 나타냅니다.</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>TYPE</th>\n<th>NULLABLE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ANIMAL_ID</td>\n<td>VARCHAR(N)</td>\n<td>FALSE</td>\n</tr>\n<tr>\n<td>ANIMAL_TYPE</td>\n<td>VARCHAR(N)</td>\n<td>FALSE</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>DATETIME</td>\n<td>FALSE</td>\n</tr>\n<tr>\n<td>NAME</td>\n<td>VARCHAR(N)</td>\n<td>TRUE</td>\n</tr>\n<tr>\n<td>SEX<em>UPON</em>OUTCOME</td>\n<td>VARCHAR(N)</td>\n<td>FALSE</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>보호소에서는 몇 시에 입양이 가장 활발하게 일어나는지 알아보려 합니다.\n0시부터 23시까지, 각 시간대별로 입양이 몇 건이나 발생했는지 조회하는 SQL문을 작성해주세요.\n이때 결과는 시간대 순으로 정렬해야 합니다.</p>\n</blockquote>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h2>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">WITH</span> RECURSIVE <span class=\"token keyword\">hour</span> <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token number\">0</span> <span class=\"token keyword\">AS</span> h\n\t<span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n\t<span class=\"token keyword\">SELECT</span> h<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">hour</span> <span class=\"token keyword\">WHERE</span> h<span class=\"token operator\">&lt;</span><span class=\"token number\">23</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">hour</span><span class=\"token punctuation\">.</span>h <span class=\"token keyword\">AS</span> <span class=\"token keyword\">hour</span><span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">hour</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">DATETIME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> count <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">hour</span>\n<span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> ANIMAL_OUTS <span class=\"token keyword\">AS</span> a <span class=\"token keyword\">ON</span> <span class=\"token keyword\">hour</span><span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> <span class=\"token keyword\">hour</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">DATETIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token keyword\">hour</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token keyword\">hour</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>도저히 {0시, 1시, … 23시}를 새로운 컬럼으로 빼내는 방법이 떠오르지 않았다.\n프로그래머스 SQL 문제를 풀다가 구글링을 한 건 처음이었다.\n<code class=\"language-text\">WITH RECURSIVE</code> 구문 자체가 초면이었기에 블로그의 풀이를 보고도 한참 생각해야 했다.\n풀이를 통해 억지로 이해를 해내긴 했지만 더 정확히 이해하기 위해 MySQL 공식문서를 확인했다.</p>\n<h3 id=\"withcommon-table-expressions\" style=\"position:relative;\"><a href=\"#withcommon-table-expressions\" aria-label=\"withcommon table expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#withcommon-table-expressions\" aria-label=\"withcommon table expressions permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WITH(Common Table Expressions)</h3>\n<p>공통 테이블 표현식이라고도 불리는 <code class=\"language-text\">WITH</code> 구문은 다른 명령문에서 참조할 수 있는 임시 결과 집합이다.\n다른 명령문에서 참조할 수 있듯이 다른 <code class=\"language-text\">WITH</code> 문에서도 결과 집합을 참조해 사용할 수 있다.</p>\n<h3 id=\"with-recursive\" style=\"position:relative;\"><a href=\"#with-recursive\" aria-label=\"with recursive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#with-recursive\" aria-label=\"with recursive permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WITH RECURSIVE</h3>\n<p>재귀 CTE라고 불리는 <code class=\"language-text\">WITH RECURSIVE</code> 구문은 반복적으로 생성되는 행 집합이다.\n비재귀 CTE와 차이점으로는 다음 두번째 SELECT에서 <code class=\"language-text\">cte_name</code>을 참조하는지 여부라고 볼 수 있겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">WITH</span> RECURSIVE cte_name <span class=\"token keyword\">AS</span>\n<span class=\"token punctuation\">(</span>\n\t  <span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>      <span class=\"token operator\">&lt;</span><span class=\"token comment\">-- specifies initial set</span>\n\t  <span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span>\n\t  <span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>      <span class=\"token operator\">&lt;</span><span class=\"token comment\">-- specifies how to derive new rows</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>첫번째 <code class=\"language-text\">SELECT</code>에서는 반복할 행을 초기화하고 두번째 <code class=\"language-text\">SELECT</code>에서는 행을 어떻게 확장할 지 작성한다.\n더이상 행을 생성하지 않을때까지 반복하게 되므로 <code class=\"language-text\">WHERE</code>절을 작성하여 루프 종료를 트리거할 수 있다.</p>\n<p>풀이에서는 0으로 행을 초기화하고 0+1, 1+1, 2+1 … 처럼 <code class=\"language-text\">h</code>를 1씩 증가하며 행을 확장한다.\n<code class=\"language-text\">h</code>가 23이 되면 루프가 종료되고 <code class=\"language-text\">UNION ALL</code>을 통해 {0, 1, … 23}이 합집합의 결과로 떨어지게 된다.</p>\n<h3 id=\"with-임시-테이블은-어디에-저장될까\" style=\"position:relative;\"><a href=\"#with-%EC%9E%84%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%80-%EC%96%B4%EB%94%94%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%A0%EA%B9%8C\" aria-label=\"with 임시 테이블은 어디에 저장될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#with-%EC%9E%84%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%80-%EC%96%B4%EB%94%94%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%A0%EA%B9%8C\" aria-label=\"with 임시 테이블은 어디에 저장될까 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WITH 임시 테이블은 어디에 저장될까?</h3>\n<p>Real MySQL 8.0 책을 공부하면서 임시테이블의 경우 메모리에 저장해두었다가 용량이 커지면 디스크로 옮기는 과정이 있다는 것을 알게 되었다.\n그럼 WITH 구문의 결과를 저장할 때도 비슷하게 동작할까? 찾아본 결과 동일했다.</p>\n<blockquote>\n<p>CTE actual cost may also be affected by result set size.\nA CTE that produces many rows may require an internal temporary table large enough to be converted from in-memory to on-disk format and may suffer a performance penalty.</p>\n</blockquote>\n<h3 id=\"with-vs-subquery\" style=\"position:relative;\"><a href=\"#with-vs-subquery\" aria-label=\"with vs subquery permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#with-vs-subquery\" aria-label=\"with vs subquery permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WITH vs Subquery</h3>\n<p>성능적인 면에서도 큰 차이가 없는 WITH 구문과 Subquery은 각각 어떨 때 쓰는 것이 좋을까?</p>\n<p>CTE는 재귀적일 수 있다는 점이 가장 큰 특징이다. 또한 WITH 구문은 단일 명령어로 재사용이 가능하기 때문에 Subquery보다 사용성이 좋다.\nSubquery의 경우 <code class=\"language-text\">WHERE</code>절에서 바로 필터링이 가능하다는 점, 행이 아닌 열처럼 동작할 수 있다는 점이 특징이다.</p>\n<p>각 구문의 특징을 숙지하고 문제 해결의 포인트와 연결시킬 수 있는 구문을 선택하도록 하자.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/59413\">Programmers</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/with.html\">MySQL Document</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/sql/Finding-an-adoption-time/#%EB%AC%B8%EC%A0%9C\">문제</a></li>\n<li>\n<p><a href=\"/sql/Finding-an-adoption-time/#%ED%92%80%EC%9D%B4\">풀이</a></p>\n<ul>\n<li><a href=\"/sql/Finding-an-adoption-time/#withcommon-table-expressions\">WITH(Common Table Expressions)</a></li>\n<li><a href=\"/sql/Finding-an-adoption-time/#with-recursive\">WITH RECURSIVE</a></li>\n<li><a href=\"/sql/Finding-an-adoption-time/#with-%EC%9E%84%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%80-%EC%96%B4%EB%94%94%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%A0%EA%B9%8C\">WITH 임시 테이블은 어디에 저장될까?</a></li>\n<li><a href=\"/sql/Finding-an-adoption-time/#with-vs-subquery\">WITH vs Subquery</a></li>\n</ul>\n</li>\n<li><a href=\"/sql/Finding-an-adoption-time/#references\">References</a></li>\n</ul>","frontmatter":{"title":"🧠 입양 시각 구하기(2)","date":"February 15, 2023"}}},"pageContext":{"slug":"/sql/Finding-an-adoption-time/","previous":{"fields":{"slug":"/spring/Spring-RequestParam-ResponseBody/"},"frontmatter":{"title":"🌱 Spring @RequestParam @ResponseBody","category":"Spring","draft":false}},"next":null}},"staticQueryHashes":["3128451518","96099027"]}