{"componentChunkName":"component---src-templates-blog-post-js","path":"/tdd/Django-server-test/","result":{"data":{"site":{"siteMetadata":{"title":"개미의 개발노트","author":"ugaemi","siteUrl":"http://ugaemi.com","comment":{"disqusShortName":"","utterances":"ugaemi/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"6757223f-4fef-527b-8f23-8c250a1dba89","excerpt":"목표 크롬 브라우저 창을 실행하기 위해 의 를 가동한다. 브라우저를 통해 로컬 PC 상의 웹 페이지를 연다. 웹 페이지 타이틀에 Django 라는 단어가 있는지 확인한다. 첫 번째 테스트 위 소스코드를 실행하면 selenium을 import 할 수 없다고 할 것이다.\npip로 을 설치해보자. 을 이용해 브라우저를 실행시킬 웹 드라이버를 설치해주어야 한다.\n적절한 파일을 다운로드하여 원하는 곳에 저장시키자.\n필자는 Chrome을 이용할 것이므로 ChromeDriver…","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목표</h2>\n<ol>\n<li>크롬 브라우저 창을 실행하기 위해 <code class=\"language-text\">selenium</code>의 <code class=\"language-text\">webdriver</code>를 가동한다.</li>\n<li>브라우저를 통해 로컬 PC 상의 웹 페이지를 연다.</li>\n<li>웹 페이지 타이틀에 <strong>Django</strong> 라는 단어가 있는지 확인한다.</li>\n</ol>\n<h2 id=\"첫-번째-테스트\" style=\"position:relative;\"><a href=\"#%EC%B2%AB-%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"첫 번째 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EC%B2%AB-%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"첫 번째 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫 번째 테스트</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n\n\nbrowser <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbrowser<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8000'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">assert</span> <span class=\"token string\">'Django'</span> <span class=\"token keyword\">in</span> browser<span class=\"token punctuation\">.</span>title</code></pre></div>\n<p>위 소스코드를 실행하면 <em>selenium을 import 할 수 없다</em>고 할 것이다.\npip로 <code class=\"language-text\">selenium</code>을 설치해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-U</span> selenium</code></pre></div>\n<p><code class=\"language-text\">selenium</code>을 이용해 브라우저를 실행시킬 웹 드라이버를 설치해주어야 한다.\n적절한 파일을 다운로드하여 원하는 곳에 저장시키자.\n필자는 Chrome을 이용할 것이므로 <a href=\"https://sites.google.com/a/chromium.org/chromedriver/home\">ChromeDriver</a>를 받았다.</p>\n<p>드라이버 설치를 완료했다면 다시 실행해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">selenium.common.exceptions.WebDriverException: Message: <span class=\"token string\">'chromedriver'</span> executable needs to be <span class=\"token keyword\">in</span> <span class=\"token environment constant\">PATH</span><span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>위와 같은 오류가 뜬다면 웹 드라이버의 경로를 지정해주지 않아서이다.\n웹 드라이버를 저장한 상대 경로나 절대 경로를 다음과 같이 넣어주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">browser <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/chromedriver'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 다시 실행해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"functional_test.py\"</span>, line <span class=\"token number\">11</span>, <span class=\"token keyword\">in</span>\n    assert <span class=\"token string\">'Django'</span> <span class=\"token keyword\">in</span> browser.title\nAssertionError</code></pre></div>\n<p>크롬 창이 뜨긴 하는데 사이트 연결이 안되고 위 에러가 나타난다면 Django 서버가 켜있지 않아서이다.\n터미널을 하나 더 켜서 Django 서버를 실행시키자.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">python manage.py runserver</code></pre></div>\n<p>그리고 다시 실행해보자.</p>\n<p>정상적으로 Django 웹 페이지가 보인다.\nTitle에 <strong>Django: the Web framework …</strong> 라고 쓰여있다.\n그렇다면 위에서 작성한 assert문(Title에 <strong>Django</strong>가 있는지 확인하는 문장)이 <code class=\"language-text\">True</code>여야 한다.\n터미널 창을 확인해보면 아무런 에러 메시지가 뜨지 않은 것을 확인할 수 있다.</p>\n<h2 id=\"두-번째-테스트\" style=\"position:relative;\"><a href=\"#%EB%91%90-%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"두 번째 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EB%91%90-%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"두 번째 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두 번째 테스트</h2>\n<p>이번에는 <code class=\"language-text\">unittest</code> 모듈을 이용한 테스트 코드를 작성해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">import</span> unittest\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DjangoTest</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>browser <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/chromedriver'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_can_start_django</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8000'</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>assertIn<span class=\"token punctuation\">(</span><span class=\"token string\">'Django'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>우선 <code class=\"language-text\">unittest.TestCase</code>를 상속하는 클래스 <code class=\"language-text\">DjangoTest</code>를 만든다.\n테스트의 메인 코드는 <code class=\"language-text\">test_can_start_django()</code> 라는 메소드이다.\n<code class=\"language-text\">setUp()</code>과 <code class=\"language-text\">tearDown()</code>은 각 테스트 시작 전과 후에 실행되는 메소드로 <code class=\"language-text\">setUp</code>은 브라우저를 열 때, <code class=\"language-text\">tearDown</code>은 닫을 때 사용했다.\n<code class=\"language-text\">assertIn(a, b)</code> 메소드는 <strong>a in b</strong>를 확인하는 메소드이다.\n위 코드로 <strong>Django</strong>라는 텍스트가 브라우저의 타이틀에 있는지 확인할 수 있다.\n에러 메시지가 어떻게 보이는지 알아보기 위해 Django 서버를 끄고 위 코드를 실행해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"functional_tests.py\"</span>, line <span class=\"token number\">19</span>, <span class=\"token keyword\">in</span> test_can_start_django\n    self.assertIn<span class=\"token punctuation\">(</span><span class=\"token string\">'Django'</span>, self.browser.title<span class=\"token punctuation\">)</span>\nAssertionError: <span class=\"token string\">'Django'</span> not found <span class=\"token keyword\">in</span> <span class=\"token string\">'localhost'</span>\n----------------------------------------------------------------------\nRan <span class=\"token number\">1</span> <span class=\"token builtin class-name\">test</span> <span class=\"token keyword\">in</span> <span class=\"token number\">2</span>.233s\n\nFAILED <span class=\"token punctuation\">(</span>failures<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>첫번째 코드와 비교해보면 두번째 코드가 에러가 어떤 함수에서 났는지 또 몇 개의 테스트에서 몇 개가 틀렸는지 정확하게 짚어주는 것을 확인할 수 있다.\n예상대로 <em>‘Django’ not found in ‘localhost’</em> 라는 에러 메시지가 보인다. 이번엔 Django 서버를 켜고 돌려보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">.</span>\n----------------------------------------------------------------------\nRan <span class=\"token number\">1</span> <span class=\"token builtin class-name\">test</span> <span class=\"token keyword\">in</span> <span class=\"token number\">2</span>.130s\n\nOK</code></pre></div>\n<p>성공했다.\n하지만 여기서 한가지 더 작업해주어야 할 것이 있다.</p>\n<h2 id=\"암묵적-대기-기능-추가\" style=\"position:relative;\"><a href=\"#%EC%95%94%EB%AC%B5%EC%A0%81-%EB%8C%80%EA%B8%B0-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80\" aria-label=\"암묵적 대기 기능 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EC%95%94%EB%AC%B5%EC%A0%81-%EB%8C%80%EA%B8%B0-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80\" aria-label=\"암묵적 대기 기능 추가 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>암묵적 대기 기능 추가</h2>\n<p><code class=\"language-text\">selenium</code>은 비교적 안정적으로 페이지 로딩이 끝날 때까지 기다렸다가 테스트를 실행하지만 완벽하진 않다.\n<code class=\"language-text\">implicitly_wait</code>는 필요에 따라 지정한 시간만큼 동작을 대기 상태로 둘 수 있다.</p>\n<p>다음은 3초간 대기 후 처리하도록 하는 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>browser <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/chromedriver'</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>implicitly_wait<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://book.naver.com/bookdb/book_detail.nhn?bid=8819504\">파이썬을 이용한 클린코드를 위한 테스트 주도 개발</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/tdd/Django-server-test/#%EB%AA%A9%ED%91%9C\">목표</a></li>\n<li><a href=\"/tdd/Django-server-test/#%EC%B2%AB-%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\">첫 번째 테스트</a></li>\n<li><a href=\"/tdd/Django-server-test/#%EB%91%90-%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\">두 번째 테스트</a></li>\n<li><a href=\"/tdd/Django-server-test/#%EC%95%94%EB%AC%B5%EC%A0%81-%EB%8C%80%EA%B8%B0-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80\">암묵적 대기 기능 추가</a></li>\n<li><a href=\"/tdd/Django-server-test/#references\">References</a></li>\n</ul>","frontmatter":{"title":"🔍 Django 서버 실행 테스트하기 (with selenium)","date":"August 24, 2019"}}},"pageContext":{"slug":"/tdd/Django-server-test/","previous":{"fields":{"slug":"/algorithm/Care-string/"},"frontmatter":{"title":"🧠 문자열 다루기 기본","category":"Algorithm","draft":false}},"next":{"fields":{"slug":"/algorithm/Is-sqrt/"},"frontmatter":{"title":"🧠 정수 제곱근 판별","category":"Algorithm","draft":false}}}},"staticQueryHashes":["3128451518","96099027"]}