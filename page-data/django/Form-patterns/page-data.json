{"componentChunkName":"component---src-templates-blog-post-js","path":"/django/Form-patterns/","result":{"data":{"site":{"siteMetadata":{"title":"개미의 개발노트","author":"ugaemi","siteUrl":"http://ugaemi.com","comment":{"disqusShortName":"","utterances":"ugaemi/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"dd95017e-aaba-52a6-8803-777a85891e4c","excerpt":"Two Scoops of Django 책에서 소개한 폼 패턴들을 요약 정리해보았다. 말 그대로 요약한 내용이기 때문에 코드에 대한 자세한 설명들은 책을 참고하시는 게 좋다 :) 패턴 1: 간단한 모델폼과 기본 유효성 검사기  모델을 와 에서 이용하도록 한다. 두 뷰에서  모델에 기반을 둔 을 자동 생성한다. 생성된 이  모델의 기본 필드 유효성 검사기를 이용하게 된다. 패턴…","html":"<p>Two Scoops of Django 책에서 소개한 폼 패턴들을 요약 정리해보았다.</p>\n<p>말 그대로 <strong>요약</strong>한 내용이기 때문에 코드에 대한 자세한 설명들은 책을 참고하시는 게 좋다 :)</p>\n<h2 id=\"패턴-1-간단한-모델폼과-기본-유효성-검사기\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%84%B4-1-%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%AA%A8%EB%8D%B8%ED%8F%BC%EA%B3%BC-%EA%B8%B0%EB%B3%B8-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%EA%B8%B0\" aria-label=\"패턴 1 간단한 모델폼과 기본 유효성 검사기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%ED%8C%A8%ED%84%B4-1-%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%AA%A8%EB%8D%B8%ED%8F%BC%EA%B3%BC-%EA%B8%B0%EB%B3%B8-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%EA%B8%B0\" aria-label=\"패턴 1 간단한 모델폼과 기본 유효성 검사기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패턴 1: 간단한 모델폼과 기본 유효성 검사기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> CreateView<span class=\"token punctuation\">,</span> UpdateView\n\n<span class=\"token keyword\">from</span> braces<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> LoginRequiredMixin\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Flavor\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorCreateView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> CreateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Flavor\n    fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'slug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scoops_remaining'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorUpdateView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> UpdateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Flavor\n    fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'slug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scoops_remaining'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Flavor</code> 모델을 <code class=\"language-text\">FlavorCreateView</code>와 <code class=\"language-text\">FlavorUpdateView</code>에서 이용하도록 한다.</li>\n<li>두 뷰에서 <code class=\"language-text\">Flavor</code> 모델에 기반을 둔 <code class=\"language-text\">ModelForm</code>을 자동 생성한다.</li>\n<li>생성된 <code class=\"language-text\">ModelForm</code>이 <code class=\"language-text\">Flavor</code> 모델의 기본 필드 유효성 검사기를 이용하게 된다.</li>\n</ul>\n<h2 id=\"패턴-2-모델폼에서-커스텀-폼-필드-유효성-검사기-이용하기\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%84%B4-2-%EB%AA%A8%EB%8D%B8%ED%8F%BC%EC%97%90%EC%84%9C-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%8F%BC-%ED%95%84%EB%93%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%EA%B8%B0-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"패턴 2 모델폼에서 커스텀 폼 필드 유효성 검사기 이용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%ED%8C%A8%ED%84%B4-2-%EB%AA%A8%EB%8D%B8%ED%8F%BC%EC%97%90%EC%84%9C-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%8F%BC-%ED%95%84%EB%93%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%EA%B8%B0-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"패턴 2 모델폼에서 커스텀 폼 필드 유효성 검사기 이용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패턴 2: 모델폼에서 커스텀 폼 필드 유효성 검사기 이용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> ValidationError\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">validate_tasty</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> value<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Tasty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Must start with Tasty\"</span>\n        <span class=\"token keyword\">raise</span> ValidationError<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">validate_tasty()</code>를 다른 종류의 디저트 모델에 적용하기 위해 우선 <code class=\"language-text\">TastyTitleAbstractModel</code>이라는 프로젝트 전반에서 이용할 수 있는 추상화 모델을 추가한다.\n<code class=\"language-text\">Flavor</code>와 <code class=\"language-text\">Milkshake</code> 모델이 각기 다른 모델이라 가정할 때 유효성 검사기를 하나의 앱에만 추가하는 것은 적절하지 않을 것이다.</p>\n<p>따라서 그 대신 <code class=\"language-text\">core/models.py</code> 모듈을 만들고 <code class=\"language-text\">TastyTitleAbstractModel</code>을 이곳에 추가하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>validators <span class=\"token keyword\">import</span> validate_tasty\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TastyTitleAbstractModel</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> validators<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>validate_tasty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        abstract <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></code></pre></div>\n<p>앞의 <code class=\"language-text\">core/models.py</code> 코드에서 마지막 두 줄이 <code class=\"language-text\">TastyTitleAbstractModel</code>을 추상화 모델로 만들어 준다.\n이제 원래 <code class=\"language-text\">flavors/models.py</code>의 <code class=\"language-text\">Flavor</code> 코드에서 <code class=\"language-text\">TastyTitleAbstractModel</code>을 부모 클래스로 지정해 보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>urlresolvers <span class=\"token keyword\">import</span> reverse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">from</span> core<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> TastyTitleAbstractModel\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flavor</span><span class=\"token punctuation\">(</span>TastyTitleAbstractModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    slug <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>SlugField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    scoops_remaining <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_absolute_url</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> reverse<span class=\"token punctuation\">(</span><span class=\"token string\">\"flavors:detail\"</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"slug\"</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>단지 폼에만 <code class=\"language-text\">validate_tasty()</code>를 이용하고자 할 때는 어떻게 해야 할까?</li>\n<li>타이틀 말고 다른 필드에 이를 적용하고 싶을 때는 어떻게 할 것인가?</li>\n</ul>\n<p>이러한 경우들을 처리하기 위해 커스텀 필드 유효성 검사기를 이용하는 커스텀 <code class=\"language-text\">FlavorForm</code>을 작성하기로 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> forms\n\n<span class=\"token keyword\">from</span> core<span class=\"token punctuation\">.</span>validators <span class=\"token keyword\">import</span> validate_tasty\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Flavor\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>ModelForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>FlavorForm<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>validators<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>validate_tasty<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span><span class=\"token string\">\"slug\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>validators<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>validate_tasty<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Flavor</code></pre></div>\n<p>장고의 모델 기반 수정 뷰는 뷰의 모델 속성을 기반으로 모델폼을 자동으로 생성해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> messages\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> CreateView<span class=\"token punctuation\">,</span> UpdateView<span class=\"token punctuation\">,</span> DetailView\n\n<span class=\"token keyword\">from</span> braces<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> LoginRequiredMixin\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Flavor\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> FlavorForm\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorActionMixin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    model <span class=\"token operator\">=</span> Flavor\n    fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'slug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scoops_remaining'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">success_msg</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> NotImplemented\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">form_valid</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        messages<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>success_msg<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>FlavorActionMixin<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>form_valid<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorCreateView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> FlavorActionMixin<span class=\"token punctuation\">,</span> CreateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    success_msg <span class=\"token operator\">=</span> <span class=\"token string\">\"created\"</span>\n    form_class <span class=\"token operator\">=</span> FlavorForm\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorUpdateView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> FlavorActionMixin<span class=\"token punctuation\">,</span> UpdateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    success_msg <span class=\"token operator\">=</span> <span class=\"token string\">\"updated\"</span>\n    form_class <span class=\"token operator\">=</span> FlavorForm\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorDetailView</span><span class=\"token punctuation\">(</span>DetailView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    model <span class=\"token operator\">=</span> Flavor</code></pre></div>\n<h2 id=\"패턴-3-유효성-검사의-클린-상태-오버라이딩하기\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%84%B4-3-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%EC%9D%98-%ED%81%B4%EB%A6%B0-%EC%83%81%ED%83%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%ED%95%98%EA%B8%B0\" aria-label=\"패턴 3 유효성 검사의 클린 상태 오버라이딩하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%ED%8C%A8%ED%84%B4-3-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%EC%9D%98-%ED%81%B4%EB%A6%B0-%EC%83%81%ED%83%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%ED%95%98%EA%B8%B0\" aria-label=\"패턴 3 유효성 검사의 클린 상태 오버라이딩하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패턴 3: 유효성 검사의 클린 상태 오버라이딩하기</h2>\n<ul>\n<li>다중 필드에 대한 유효성 검사</li>\n<li>이미 유효성 검사가 끝난 데이터베이스의 데이터가 포함된 유효성 검사</li>\n</ul>\n<p>위 두 가지 경우 전부 커스텀 로직으로 <code class=\"language-text\">clean()</code> 또는 <code class=\"language-text\">clean_&lt;field_name>()</code> 메서드를 오버라이딩 할 수 있는 최적의 경우다.\n기본 또는 커스텀 필드 유효성 검사기가 실행된 후, 장고는 다음 과정으로 <code class=\"language-text\">clean()</code> 메서드나 <code class=\"language-text\">clean_&lt;field_name>()</code> 메서드를 이용하여 입력된 데이터의 유효성을 검사하는 절차를 진행한다.</p>\n<ol>\n<li><code class=\"language-text\">clean()</code> 메서드는 어떤 특별한 필드에 대한 정의도 가지고 있지 않기 때문에 두 개 또는 그 이상의 필드들에 대해 서로 간의 유효성을 검사하는 공간이 된다.</li>\n<li>클린(<code class=\"language-text\">clean</code>) 유효성 검사 상태는 영속 데이터에 대해 유효성을 검사하기에 좋은 장소다. 이미 유효성 검사를 일부 마친 데이터에 대해 불필요한 데이터베이스 연동을 줄일 수 있다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> forms\n<span class=\"token keyword\">from</span> flavors<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Flavor\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IceCreamOrderForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    slug <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>ChoiceField<span class=\"token punctuation\">(</span><span class=\"token string\">\"Flavor\"</span><span class=\"token punctuation\">)</span>\n    toppings <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>IceCreamOrderForm<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span><span class=\"token string\">\"slug\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>choices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> Flavor<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clean_slug</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        slug <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"slug\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> Flavor<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>slug<span class=\"token operator\">=</span>slug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>scoops_remaining <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> forms<span class=\"token punctuation\">.</span>ValidationError<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> msg\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cleaned_data <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>IceCreamOrderForm<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    slug <span class=\"token operator\">=</span> cleanec_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"slug\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    toppings <span class=\"token operator\">=</span> cleaned_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"toppings\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token string\">\"chocolate\"</span> <span class=\"token keyword\">in</span> slug<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token string\">\"chocolate\"</span> <span class=\"token keyword\">in</span> toppings<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Your order has too much chocolate.\"</span>\n        <span class=\"token keyword\">raise</span> forms<span class=\"token punctuation\">.</span>ValidationError<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> cleaned_data</code></pre></div>\n<h2 id=\"패턴-4-폼-필드-해킹하기두-개의-cbv-두-개의-폼-한-개의-모델\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%84%B4-4-%ED%8F%BC-%ED%95%84%EB%93%9C-%ED%95%B4%ED%82%B9%ED%95%98%EA%B8%B0%EB%91%90-%EA%B0%9C%EC%9D%98-cbv-%EB%91%90-%EA%B0%9C%EC%9D%98-%ED%8F%BC-%ED%95%9C-%EA%B0%9C%EC%9D%98-%EB%AA%A8%EB%8D%B8\" aria-label=\"패턴 4 폼 필드 해킹하기두 개의 cbv 두 개의 폼 한 개의 모델 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%ED%8C%A8%ED%84%B4-4-%ED%8F%BC-%ED%95%84%EB%93%9C-%ED%95%B4%ED%82%B9%ED%95%98%EA%B8%B0%EB%91%90-%EA%B0%9C%EC%9D%98-cbv-%EB%91%90-%EA%B0%9C%EC%9D%98-%ED%8F%BC-%ED%95%9C-%EA%B0%9C%EC%9D%98-%EB%AA%A8%EB%8D%B8\" aria-label=\"패턴 4 폼 필드 해킹하기두 개의 cbv 두 개의 폼 한 개의 모델 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패턴 4: 폼 필드 해킹하기(두 개의 CBV, 두 개의 폼, 한 개의 모델)</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>urlresolvers <span class=\"token keyword\">import</span> reverse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IceCreamStore</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> modes<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    block_address <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    phone <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    description <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span>blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_absolute_url</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> reverse<span class=\"token punctuation\">(</span><span class=\"token string\">\"store_detail\"</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"pk\"</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>pk<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>사용자가 <code class=\"language-text\">title</code>과 <code class=\"language-text\">block_address</code>는 입력해야 하지만 <code class=\"language-text\">phone</code>과 <code class=\"language-text\">description</code> 필드는 입력하지 않아도 되게 구성되어 있다.\n후에 사용자가 <code class=\"language-text\">phone</code>과 <code class=\"language-text\">description</code> 필드를 추가적으로 업데이트하는 것이 가능하도록 구성하고 싶다면 어떻게 해야할까?</p>\n<p>장고 폼을 사용할 땐 반드시 다음 사항을 기억하자.</p>\n<p>실체화된 폼 객체는 유사 딕셔너리 객체인 <code class=\"language-text\">fields</code> 속성 안에 그 필드들을 저장한다.\n따라서 폼으로 필드의 정의를 복사, 붙이기 하는 대신에 간단하게 <code class=\"language-text\">ModelForm</code>의 <code class=\"language-text\">__init__()</code> 메서드에서 새로운 속성을 적용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> IceCreamStore\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IceCreamStoreUpdateForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>ModelForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> IceCreamStore\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>IceCreamStoreUpdateForm<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        self<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span><span class=\"token string\">\"description\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></code></pre></div>\n<p>결국 기억해야 할 중요한 점은 장고의 폼도 결국 <strong>파이썬 클래스</strong>라는 사실이다.\n장고의 폼 또한 객체로 실체화되고 슈퍼클래스가 되어 다른 클래스를 상속하기도 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> forms\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> IceCreamStore\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IceCreamStoreCreateForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>ModelForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> IceCreamStore\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"block_address\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IceCreamStoreUpdateForm</span><span class=\"token punctuation\">(</span>IceCreamStoreCreateForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>IceCreamStoreUpdateForm<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>requird <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        self<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span><span class=\"token string\">\"description\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">(</span>IceCreamStoreCreateForm<span class=\"token punctuation\">.</span>Meta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"block_address\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"description\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> CreateView<span class=\"token punctuation\">,</span> UpdateView\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> IceCreamStoreCreateForm\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> IceCreamStoreUpdateForm\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> IceCreamStore\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IceCreamCreateView</span><span class=\"token punctuation\">(</span>CreateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    model <span class=\"token operator\">=</span> IceCreamStore\n    form_class <span class=\"token operator\">=</span> IceCreamStoreCreateForm\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IceCreamUpdateView</span><span class=\"token punctuation\">(</span>UpdateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    model <span class=\"token operator\">=</span> IceCreamStore\n    form_class <span class=\"token operator\">=</span> IceCreamStoreUpdateForm</code></pre></div>\n<h2 id=\"패턴-5-재사용-가능한-검색-믹스인-뷰\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%84%B4-5-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EA%B2%80%EC%83%89-%EB%AF%B9%EC%8A%A4%EC%9D%B8-%EB%B7%B0\" aria-label=\"패턴 5 재사용 가능한 검색 믹스인 뷰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%ED%8C%A8%ED%84%B4-5-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EA%B2%80%EC%83%89-%EB%AF%B9%EC%8A%A4%EC%9D%B8-%EB%B7%B0\" aria-label=\"패턴 5 재사용 가능한 검색 믹스인 뷰 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패턴 5: 재사용 가능한 검색 믹스인 뷰</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TitleSearchMixin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_queryset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        queryset <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>TitleSearchMixin<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_queryset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        q <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> q<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> queryset<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>title__icontains<span class=\"token operator\">=</span>q<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> queryset</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> ListView\n\n<span class=\"token keyword\">from</span> core<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> TitleSearchMixin\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Flavor\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorListView</span><span class=\"token punctuation\">(</span>TitleSearchMixin<span class=\"token punctuation\">,</span> ListView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    model <span class=\"token operator\">=</span> Flavor</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> ListView\n\n<span class=\"token keyword\">from</span> core<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> TitleSearchMixin\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Store\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IceCreamStoreListView</span><span class=\"token punctuation\">(</span>TitleSearchMixin<span class=\"token punctuation\">,</span> ListView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    model <span class=\"token operator\">=</span> Store</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GET<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>q<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>search<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li>Two Scoops of Django</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/django/Form-patterns/#%ED%8C%A8%ED%84%B4-1-%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%AA%A8%EB%8D%B8%ED%8F%BC%EA%B3%BC-%EA%B8%B0%EB%B3%B8-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%EA%B8%B0\">패턴 1: 간단한 모델폼과 기본 유효성 검사기</a></li>\n<li><a href=\"/django/Form-patterns/#%ED%8C%A8%ED%84%B4-2-%EB%AA%A8%EB%8D%B8%ED%8F%BC%EC%97%90%EC%84%9C-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%8F%BC-%ED%95%84%EB%93%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%EA%B8%B0-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\">패턴 2: 모델폼에서 커스텀 폼 필드 유효성 검사기 이용하기</a></li>\n<li><a href=\"/django/Form-patterns/#%ED%8C%A8%ED%84%B4-3-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%EC%9D%98-%ED%81%B4%EB%A6%B0-%EC%83%81%ED%83%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9%ED%95%98%EA%B8%B0\">패턴 3: 유효성 검사의 클린 상태 오버라이딩하기</a></li>\n<li><a href=\"/django/Form-patterns/#%ED%8C%A8%ED%84%B4-4-%ED%8F%BC-%ED%95%84%EB%93%9C-%ED%95%B4%ED%82%B9%ED%95%98%EA%B8%B0%EB%91%90-%EA%B0%9C%EC%9D%98-cbv-%EB%91%90-%EA%B0%9C%EC%9D%98-%ED%8F%BC-%ED%95%9C-%EA%B0%9C%EC%9D%98-%EB%AA%A8%EB%8D%B8\">패턴 4: 폼 필드 해킹하기(두 개의 CBV, 두 개의 폼, 한 개의 모델)</a></li>\n<li><a href=\"/django/Form-patterns/#%ED%8C%A8%ED%84%B4-5-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EA%B2%80%EC%83%89-%EB%AF%B9%EC%8A%A4%EC%9D%B8-%EB%B7%B0\">패턴 5: 재사용 가능한 검색 믹스인 뷰</a></li>\n<li><a href=\"/django/Form-patterns/#references\">References</a></li>\n</ul>","frontmatter":{"title":"🔫 폼 패턴들","date":"March 31, 2020"}}},"pageContext":{"slug":"/django/Form-patterns/","previous":{"fields":{"slug":"/django/Basic-of-django-form/"},"frontmatter":{"title":"🔫 장고 폼의 기초","category":"Django","draft":false}},"next":{"fields":{"slug":"/contributing/My-First-Contributing/"},"frontmatter":{"title":"🐱 나의 첫 오픈 소스 컨트리뷰팅","category":"Contributing","draft":false}}}},"staticQueryHashes":["3128451518","96099027"]}