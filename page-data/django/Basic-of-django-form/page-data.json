{"componentChunkName":"component---src-templates-blog-post-js","path":"/django/Basic-of-django-form/","result":{"data":{"site":{"siteMetadata":{"title":"개미의 개발노트","author":"ugaemi","siteUrl":"http://ugaemi.com","comment":{"disqusShortName":"","utterances":"ugaemi/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"1cd33e28-0359-544b-8291-8c3782462067","excerpt":"지난 포스팅에 이어 이번에는 Two Scoops of Django 책의 장고 폼에 대한 부분을 요약 정리해보았다. 장고 폼을 제대로 이용하면 그동안 뷰에 거추장스럽게 늘어놓았던 유효성 검사에 대한 부분을 생략할 수 있다.\n정말 강력한 기능이니 알차게 써먹도록 하자! 장고 폼을 이용하여 모든 입력 데이터에 대한 유효성 검사하기 장고 폼은 파이썬 딕셔너리의 유효성을 검사하는 데 최상의 도구다.\n대부분의 경우 POST가 포함된 HTTP…","html":"<p>지난 포스팅에 이어 이번에는 Two Scoops of Django 책의 장고 폼에 대한 부분을 요약 정리해보았다.</p>\n<p>장고 폼을 제대로 이용하면 그동안 뷰에 거추장스럽게 늘어놓았던 유효성 검사에 대한 부분을 생략할 수 있다.\n정말 강력한 기능이니 알차게 써먹도록 하자!</p>\n<h2 id=\"장고-폼을-이용하여-모든-입력-데이터에-대한-유효성-검사하기\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EA%B3%A0-%ED%8F%BC%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%AA%A8%EB%93%A0-%EC%9E%85%EB%A0%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%ED%95%98%EA%B8%B0\" aria-label=\"장고 폼을 이용하여 모든 입력 데이터에 대한 유효성 검사하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EC%9E%A5%EA%B3%A0-%ED%8F%BC%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%AA%A8%EB%93%A0-%EC%9E%85%EB%A0%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%ED%95%98%EA%B8%B0\" aria-label=\"장고 폼을 이용하여 모든 입력 데이터에 대한 유효성 검사하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장고 폼을 이용하여 모든 입력 데이터에 대한 유효성 검사하기</h2>\n<p>장고 폼은 파이썬 딕셔너리의 유효성을 검사하는 데 최상의 도구다.\n대부분의 경우 POST가 포함된 HTTP 요청을 받아 유효성을 검사하는 데 이용하지만 이런 경우 외에는 절대로 쓰지 말라는 제약은 없다.</p>\n<p>다른 프로젝트로부터 CSV 파일을 받아 모델에 업데이트하는 장고 앱을 가지고 있다고 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> csv\n<span class=\"token keyword\">import</span> StringIO\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Purchase\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_csv_purchases</span><span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    rows <span class=\"token operator\">=</span> StringIO<span class=\"token punctuation\">.</span>StringIO<span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">)</span>\n    records_added <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> csv<span class=\"token punctuation\">.</span>DictReader<span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">,</span> delimiter<span class=\"token operator\">=</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        purchase<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>row<span class=\"token punctuation\">)</span>\n        records_added <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> records_added</code></pre></div>\n<p>이 코드에서 간과하고 있는 점은 <code class=\"language-text\">Purchase</code> 모델에서 문자열 값으로 저장되어 있는 셀러가 실제로 존재하는 셀러인지 그 유효성을 검사하고 있지 않다는 점이다.\n물론 <code class=\"language-text\">add_csv_purchases()</code> 함수에 유효성 검사 코드를 추가할 수도 있겠지만 매번 데이터가 바뀔 때마다 복잡한 유효성 검사 코드를 필요에 맞춰 유지 관리하기란 매우 번거로운 일이다.</p>\n<p>장고의 모델 폼을 이용하면 다음과 같이 입력 데이터에 대해 간단하게 유효성 검사를 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> csv\n<span class=\"token keyword\">import</span> StringIO\n\n<span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> forms\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Purchase<span class=\"token punctuation\">,</span> Seller\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PurchaseForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>ModelForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Purchase\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clean_seller</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        seller <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"seller\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            Seller<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>seller<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Seller<span class=\"token punctuation\">.</span>DoesNotExist<span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>seller<span class=\"token punctuation\">}</span></span><span class=\"token string\"> does not exist in purchase #</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">[</span><span class=\"token string\">'purchase_number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.\"</span></span>\n            <span class=\"token keyword\">raise</span> forms<span class=\"token punctuation\">.</span>ValidationError<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> seller\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_csv_purchase</span><span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    rows <span class=\"token operator\">=</span> StringIO<span class=\"token punctuation\">.</span>StringIO<span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">)</span>\n\n    records_added <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    errors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> csv<span class=\"token punctuation\">.</span>DictReader<span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">,</span> delimiter<span class=\"token operator\">=</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token keyword\">from</span> <span class=\"token operator\">=</span> PurchaseForm<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            form<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            records_added <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            errors<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> records_added<span class=\"token punctuation\">,</span> errors</code></pre></div>\n<h2 id=\"html-폼에서-post-메서드-이용하기\" style=\"position:relative;\"><a href=\"#html-%ED%8F%BC%EC%97%90%EC%84%9C-post-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"html 폼에서 post 메서드 이용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#html-%ED%8F%BC%EC%97%90%EC%84%9C-post-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"html 폼에서 post 메서드 이용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML 폼에서 POST 메서드 이용하기</h2>\n<p>데이터를 변경하는 모든 HTML 폼은 POST 메서드를 이용하여 데이터를 전송하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{% url 'flavor_add' %}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"데이터를-변경하는-http-폼은-언제나-csrf-보안을-이용해야-한다\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%B3%80%EA%B2%BD%ED%95%98%EB%8A%94-http-%ED%8F%BC%EC%9D%80-%EC%96%B8%EC%A0%9C%EB%82%98-csrf-%EB%B3%B4%EC%95%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"데이터를 변경하는 http 폼은 언제나 csrf 보안을 이용해야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%B3%80%EA%B2%BD%ED%95%98%EB%8A%94-http-%ED%8F%BC%EC%9D%80-%EC%96%B8%EC%A0%9C%EB%82%98-csrf-%EB%B3%B4%EC%95%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"데이터를 변경하는 http 폼은 언제나 csrf 보안을 이용해야 한다 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터를 변경하는 HTTP 폼은 언제나 CSRF 보안을 이용해야 한다</h2>\n<p>장고에는 CSRF(Cross-Site Request Forgery protection, 사이트 간 위조 요청 방지)가 내장되어 있다.</p>\n<p>CSRF 보안을 잠시 꺼 두어도 되는 경우로는 머신들 사이에 이용되는 API 사이트를 제작할 때다.\n<code class=\"language-text\">django-tastypie</code>나 <code class=\"language-text\">django-rest-framework</code> 같은 API 프레임워크에서는 이러한 처리를 자동으로 다해준다.\nAPI 요청은 단일 요청을 기반으로 인증 요청/인증 허용을 하기 때문에 이런 경우 일반적으로 HTTP 쿠키를 인증 수단으로 이용하지 않는다.</p>\n<p>장고의 <code class=\"language-text\">CsrfViewMiddleware</code>를 사이트 전체에 대한 보호막으로 이용함으로써 일일이 손으로 <code class=\"language-text\">csrf_protect</code>를 뷰에 데코레이팅하지 않아도 된다.</p>\n<h3 id=\"ajax를-통해-데이터-추가하기\" style=\"position:relative;\"><a href=\"#ajax%EB%A5%BC-%ED%86%B5%ED%95%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"ajax를 통해 데이터 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#ajax%EB%A5%BC-%ED%86%B5%ED%95%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"ajax를 통해 데이터 추가하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AJAX를 통해 데이터 추가하기</h3>\n<p>AJAX를 통해 데이터를 추가할 때는 반드시 장고의 CSRF 보안을 이용해야 한다.\n절대 AJAX 뷰를 CSRF에 예외 처리하지 말기 바란다.\n대신에 HTTP 헤더에 X-CSRFToken을 설정해두도록 한다.</p>\n<h2 id=\"장고의-폼-인스턴스-속성을-추가하는-방법-이해하기\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EA%B3%A0%EC%9D%98-%ED%8F%BC-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%86%8D%EC%84%B1%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"장고의 폼 인스턴스 속성을 추가하는 방법 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EC%9E%A5%EA%B3%A0%EC%9D%98-%ED%8F%BC-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%86%8D%EC%84%B1%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"장고의 폼 인스턴스 속성을 추가하는 방법 이해하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장고의 폼 인스턴스 속성을 추가하는 방법 이해하기</h2>\n<p>때때로 장고 폼의 <code class=\"language-text\">clean()</code>, <code class=\"language-text\">clean_FOO()</code>, <code class=\"language-text\">save()</code> 메서드에 추가로 폼 인스턴스 속성이 필요할 때가 있다.\n이럴 경우에는 <code class=\"language-text\">request.user</code> 객체를 이용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> forms\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Taster\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TasterForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>ModelForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Taster\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> kwargs<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>TasterForm<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> UpdateView\n\n<span class=\"token keyword\">from</span> braces<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> LoginRequiredMixin\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> TasterForm\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Taster\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TasterUpdateView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> UpdateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Taster\n    form_class <span class=\"token operator\">=</span> TasterForm\n    success_url <span class=\"token operator\">=</span> <span class=\"token string\">\"/someplace/\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_form_kwargs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            kwargs <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>TasterUpdateView<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_form_kwargs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>user\n            <span class=\"token keyword\">return</span> kwargs</code></pre></div>\n<h2 id=\"폼이-유효성을-검사하는-방법-알아두기\" style=\"position:relative;\"><a href=\"#%ED%8F%BC%EC%9D%B4-%EC%9C%A0%ED%9A%A8%EC%84%B1%EC%9D%84-%EA%B2%80%EC%82%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EC%95%8C%EC%95%84%EB%91%90%EA%B8%B0\" aria-label=\"폼이 유효성을 검사하는 방법 알아두기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%ED%8F%BC%EC%9D%B4-%EC%9C%A0%ED%9A%A8%EC%84%B1%EC%9D%84-%EA%B2%80%EC%82%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EC%95%8C%EC%95%84%EB%91%90%EA%B8%B0\" aria-label=\"폼이 유효성을 검사하는 방법 알아두기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>폼이 유효성을 검사하는 방법 알아두기</h2>\n<p><code class=\"language-text\">form.is_valid()</code>가 호출될 때 여러 가지 일이 다음 순서로 진행된다.</p>\n<ol>\n<li>폼이 데이터를 받으면 <code class=\"language-text\">form.is_valid()</code>는 <code class=\"language-text\">form.full_clean()</code> 메서드를 호출한다.</li>\n<li>\n<p><code class=\"language-text\">form._full_clean()</code>은 폼 필드들과 각각의 필드 유효성을 하나하나 검사하면서 다음과 같은 과정을 수행한다.</p>\n<ol>\n<li>필드에 들어온 데이터에 대해 <code class=\"language-text\">to_python()</code>을 이용하여 파이썬 형식으로 변환하거나 변환할 때 문제가 생기면 <code class=\"language-text\">ValidationError</code>를 일으킨다.</li>\n<li>커스텀 유효성 검사기를 포함한 각 필드에 특별한 유효성을 검사한다. 문제가 있을 때 <code class=\"language-text\">ValidationError</code>를 일으킨다.</li>\n<li>폼에 <code class=\"language-text\">clean_&lt;field>()</code> 메서드가 있으면 이를 실행한다.</li>\n</ol>\n</li>\n<li><code class=\"language-text\">form.full_clean()</code>이 <code class=\"language-text\">form.clean()</code> 메서드를 실행한다.</li>\n<li>\n<p><code class=\"language-text\">ModelForm</code> 인스턴스의 경우 <code class=\"language-text\">form.post_clean()</code>이 다음 작업을 한다.</p>\n<ol>\n<li><code class=\"language-text\">form.is_valid()</code>가 <code class=\"language-text\">True</code>나 <code class=\"language-text\">False</code>로 설정되어 있는 것과 관계없이 <code class=\"language-text\">ModelForm</code> 데이터를 모델 인스턴스로 설정한다.</li>\n<li>모델의 <code class=\"language-text\">clean()</code> 메서드를 호출한다. 참고로 ORM을 통해 모델 인스턴스를 저장할 때는 모델의 <code class=\"language-text\">clean()</code> 메서드가 호출되지는 않는다.</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"모델폼-데이터는-폼에-먼저-저장된-이후-모델-인스턴스에-저장된다\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%8D%B8%ED%8F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%ED%8F%BC%EC%97%90-%EB%A8%BC%EC%A0%80-%EC%A0%80%EC%9E%A5%EB%90%9C-%EC%9D%B4%ED%9B%84-%EB%AA%A8%EB%8D%B8-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%9C%EB%8B%A4\" aria-label=\"모델폼 데이터는 폼에 먼저 저장된 이후 모델 인스턴스에 저장된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EB%AA%A8%EB%8D%B8%ED%8F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%ED%8F%BC%EC%97%90-%EB%A8%BC%EC%A0%80-%EC%A0%80%EC%9E%A5%EB%90%9C-%EC%9D%B4%ED%9B%84-%EB%AA%A8%EB%8D%B8-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%9C%EB%8B%A4\" aria-label=\"모델폼 데이터는 폼에 먼저 저장된 이후 모델 인스턴스에 저장된다 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모델폼 데이터는 폼에 먼저 저장된 이후 모델 인스턴스에 저장된다</h3>\n<p><code class=\"language-text\">ModelForm</code>에서 폼 데이터는 두 가지 각기 다른 단계를 통해 저장된다.</p>\n<ol>\n<li>첫 번째로 폼 데이터가 폼 인스턴스에 저장된다.</li>\n<li>그 다음에 폼 데이터가 모델 인스턴스에 저장된다.</li>\n</ol>\n<p><code class=\"language-text\">form.save()</code> 메서드에 의해 적용되기 전까지는 <code class=\"language-text\">ModelForm</code>이 모델 인스턴스로 저장되지 않기 때문에 이렇게 분리된 과정 자체를 장점으로 이용할 수 있다.</p>\n<p>예를 들면 폼 입력 시도 실패에 대해 좀 더 자세한 사항이 필요할 때, 사용자가 입력한 폼의 데이터와 모델 인스턴스의 변화를 둘 다 저장할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ModelFormFailuserHistory</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    form_data <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    model_data <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> messages\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>cors <span class=\"token keyword\">import</span> serializers\n<span class=\"token keyword\">from</span> core<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> ModelFormFailuerHistory\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorActionMixin</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">success_msg</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> NotImplemented\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">form_valid</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        messages<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>success_msg<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>FlavorActionMixin<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>form_valid<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">form_invalid</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        form_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">)</span>\n        model_data <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>seralize<span class=\"token punctuation\">(</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>form<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        ModelFormFailuserHistory<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>\n                form_data<span class=\"token operator\">=</span>form_data<span class=\"token punctuation\">,</span>\n                model_data<span class=\"token operator\">=</span>model_data\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>FlavorActionMixin<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>form_invalid<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"formadd_error를-이용하여-폼에-에러-추가하기\" style=\"position:relative;\"><a href=\"#formadd_error%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%ED%8F%BC%EC%97%90-%EC%97%90%EB%9F%AC-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"formadd_error를 이용하여 폼에 에러 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#formadd_error%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%ED%8F%BC%EC%97%90-%EC%97%90%EB%9F%AC-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"formadd_error를 이용하여 폼에 에러 추가하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Form.add_error()를 이용하여 폼에 에러 추가하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> forms\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IceCreamReviewForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># tester 폼의 나머지 부분</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cleaned_data <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>TasterForm<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        flavor <span class=\"token operator\">=</span> cleaned_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"flavor\"</span><span class=\"token punctuation\">)</span>\n        age <span class=\"token operator\">=</span> cleaned_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> flavor <span class=\"token operator\">==</span> <span class=\"token string\">'coffee'</span> <span class=\"token keyword\">and</span> age <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">=</span> <span class=\"token string\">'Coffee Ice Cream is not for Babies.'</span>\n            self<span class=\"token punctuation\">.</span>add_error<span class=\"token punctuation\">(</span><span class=\"token string\">'flavor'</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>add_error<span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> cleaned_data</code></pre></div>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li>Two Scoops of Django</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/django/Basic-of-django-form/#%EC%9E%A5%EA%B3%A0-%ED%8F%BC%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%AA%A8%EB%93%A0-%EC%9E%85%EB%A0%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%ED%95%98%EA%B8%B0\">장고 폼을 이용하여 모든 입력 데이터에 대한 유효성 검사하기</a></li>\n<li><a href=\"/django/Basic-of-django-form/#html-%ED%8F%BC%EC%97%90%EC%84%9C-post-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\">HTML 폼에서 POST 메서드 이용하기</a></li>\n<li>\n<p><a href=\"/django/Basic-of-django-form/#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%B3%80%EA%B2%BD%ED%95%98%EB%8A%94-http-%ED%8F%BC%EC%9D%80-%EC%96%B8%EC%A0%9C%EB%82%98-csrf-%EB%B3%B4%EC%95%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\">데이터를 변경하는 HTTP 폼은 언제나 CSRF 보안을 이용해야 한다</a></p>\n<ul>\n<li><a href=\"/django/Basic-of-django-form/#ajax%EB%A5%BC-%ED%86%B5%ED%95%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">AJAX를 통해 데이터 추가하기</a></li>\n</ul>\n</li>\n<li><a href=\"/django/Basic-of-django-form/#%EC%9E%A5%EA%B3%A0%EC%9D%98-%ED%8F%BC-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%86%8D%EC%84%B1%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\">장고의 폼 인스턴스 속성을 추가하는 방법 이해하기</a></li>\n<li>\n<p><a href=\"/django/Basic-of-django-form/#%ED%8F%BC%EC%9D%B4-%EC%9C%A0%ED%9A%A8%EC%84%B1%EC%9D%84-%EA%B2%80%EC%82%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EC%95%8C%EC%95%84%EB%91%90%EA%B8%B0\">폼이 유효성을 검사하는 방법 알아두기</a></p>\n<ul>\n<li><a href=\"/django/Basic-of-django-form/#%EB%AA%A8%EB%8D%B8%ED%8F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%ED%8F%BC%EC%97%90-%EB%A8%BC%EC%A0%80-%EC%A0%80%EC%9E%A5%EB%90%9C-%EC%9D%B4%ED%9B%84-%EB%AA%A8%EB%8D%B8-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%9C%EB%8B%A4\">모델폼 데이터는 폼에 먼저 저장된 이후 모델 인스턴스에 저장된다</a></li>\n</ul>\n</li>\n<li><a href=\"/django/Basic-of-django-form/#formadd_error%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%ED%8F%BC%EC%97%90-%EC%97%90%EB%9F%AC-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">Form.add_error()를 이용하여 폼에 에러 추가하기</a></li>\n<li><a href=\"/django/Basic-of-django-form/#references\">References</a></li>\n</ul>","frontmatter":{"title":"🔫 장고 폼의 기초","date":"March 28, 2020"}}},"pageContext":{"slug":"/django/Basic-of-django-form/","previous":{"fields":{"slug":"/django/Best-use-of-CBV/"},"frontmatter":{"title":"🔫 클래스 기반 뷰의 모범적인 이용","category":"Django","draft":false}},"next":{"fields":{"slug":"/django/Form-patterns/"},"frontmatter":{"title":"🔫 폼 패턴들","category":"Django","draft":false}}}},"staticQueryHashes":["3128451518","96099027"]}