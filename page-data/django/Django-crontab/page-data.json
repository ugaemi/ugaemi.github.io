{"componentChunkName":"component---src-templates-blog-post-js","path":"/django/Django-crontab/","result":{"data":{"site":{"siteMetadata":{"title":"개미의 개발노트","author":"ugaemi","siteUrl":"http://ugaemi.com","comment":{"disqusShortName":"","utterances":"ugaemi/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"9d1ff8bc-1a83-5a59-bad4-b67cae8d14db","excerpt":"개요 매일 정각에 새로운 필드를 만들어내야 하는 기능이 필요하게 됐다. 주기적으로 함수를 실행하기 위해 django-crontab을 사용한 경험을 정리한다. 설치 및 설정 다음 명령어를 통해 설치한다. 설치를 완료했다면, 의 에 을 추가해주자. 하이픈()이 아니라 언더바()이니 헷갈리지 않도록 주의하도록 하자. 이제 cron에게 넘겨줄 업무 함수를 구현한다.\n간단하게 1분마다 hello를 출력하도록 하는 함수를 만들어 테스트해보자.\napp…","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>매일 정각에 새로운 필드를 만들어내야 하는 기능이 필요하게 됐다.</p>\n<p>주기적으로 함수를 실행하기 위해 <a href=\"https://pypi.org/project/django-crontab/\">django-crontab</a>을 사용한 경험을 정리한다.</p>\n<h2 id=\"설치-및-설정\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95\" aria-label=\"설치 및 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95\" aria-label=\"설치 및 설정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치 및 설정</h2>\n<p>다음 명령어를 통해 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pip <span class=\"token function\">install</span> django-crontab</code></pre></div>\n<p>설치를 완료했다면, <code class=\"language-text\">settings.py</code>의 <code class=\"language-text\">INSTALLED_APPS</code>에 <code class=\"language-text\">django_crontab</code>을 추가해주자.</p>\n<p>하이픈(<code class=\"language-text\">-</code>)이 아니라 언더바(<code class=\"language-text\">_</code>)이니 헷갈리지 않도록 주의하도록 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">INSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'django_crontab'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이제 cron에게 넘겨줄 업무 함수를 구현한다.\n간단하게 <strong>1분마다 hello를 출력하도록 하는 함수</strong>를 만들어 테스트해보자.\napp 폴더 하위에 <code class=\"language-text\">cron.py</code> 파일을 만들고 함수를 정의한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">hello_every_minute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 함수를 cron에게 넘겨주어야 한다.\n다시 <code class=\"language-text\">settings.py</code>로 돌아가서 다음과 같이 작성해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">CRONJOBS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span><span class=\"token string\">'* * * * *'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'app.cron.hello_every_minute'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>> /tmp/log/ggbc_cron.log'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">CRONJOBS</code> 리스트에는 여러 개의 Job을 넣어줄 수 있다.</p>\n<p>첫 번째 인자에는 업무를 어느 주기로 실행할지에 대한 내용이다.\n처음부터 분, 시, 일, 월, 요일에 대한 값이며 모두 <code class=\"language-text\">*</code>인 경우에는 매 분마다 실행한다.</p>\n<p>예를 들어 필자와 같이 자정마다 이 작업을 실행하고 싶으면 <code class=\"language-text\">'* 0 * * *'</code>과 같이 작성해주면 된다.\n일주일마다 돌고 싶으면 <code class=\"language-text\">'* * */3 * *</code>과 같이 작성해준다.</p>\n<p>슬래시(<code class=\"language-text\">/</code>)가 있으면 매 분(또는 시, 일, 월, 요일)마다 실행하는 것이고 없으면 특정 시간에 실행한다는 뜻이 된다.\n슬래시와 숫자 사이에 공백이 없도록 주의하자.</p>\n<p>두 번째 인자는 업무 함수의 경로이다.</p>\n<p>세 번째 인자는 cron 실행 로그를 쌓을 파일의 경로이다.\n출력값을 매번 확인할 수 없으니 위와 같이 로그 파일로 저장하도록 하자.</p>\n<h2 id=\"실행\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89\" aria-label=\"실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EC%8B%A4%ED%96%89\" aria-label=\"실행 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행</h2>\n<p>다음 명령어로 cron에게 업무들을 추가해주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">python manage.py <span class=\"token function\">crontab</span> <span class=\"token function\">add</span></code></pre></div>\n<p>잘 들어갔는지 확인하기 위해 다음 명령어로 현재 cron에 부여된 업무 리스트를 확인하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">python manage.py <span class=\"token function\">crontab</span> show</code></pre></div>\n<p>업무들이 한 리스트(<code class=\"language-text\">CRONJOBS</code>) 안에 있으므로 한 번에 삭제되고 한 번에 추가된다.\n삭제하는 명령어는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">python manage.py <span class=\"token function\">crontab</span> remove</code></pre></div>\n<p>삭제할 때 에러가 난다면 추가 명령어를 다시 해보고 삭제해보자.</p>\n<p>자, 이제 cron이 돌면서 매 분 로그 파일에 <em>hello</em>가 추가되어야 하는데, 로그 파일이 생성이 되지 않는다 ?</p>\n<p>그렇다면 로컬이 아니라 실 서버에 올려서 실행해보자.</p>\n<p>필자는 맥에서 실행해보았는데 스케줄링이 잘 안되는지 로그 파일이 생성되지 않았다 ㅠㅠ\n하지만 리눅스 환경에서는 잘 돌아가는 것을 확인했다. (휴)</p>","tableOfContents":"<ul>\n<li><a href=\"/django/Django-crontab/#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"/django/Django-crontab/#%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95\">설치 및 설정</a></li>\n<li><a href=\"/django/Django-crontab/#%EC%8B%A4%ED%96%89\">실행</a></li>\n</ul>","frontmatter":{"title":"🔫 django-crontab 사용하기","date":"October 19, 2019"}}},"pageContext":{"slug":"/django/Django-crontab/","previous":{"fields":{"slug":"/tdd/TDD-csrf-token/"},"frontmatter":{"title":"🔍 TDD csrf token 문제 해결","category":"TDD","draft":false}},"next":{"fields":{"slug":"/retrospective/Daily-Commit-1-Month/"},"frontmatter":{"title":"🍀 친구들과 함께 한 일일 커밋 회고","category":"Retrospective","draft":false}}}},"staticQueryHashes":["3128451518","96099027"]}