{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/Merge-K-Sorted-Lists/","result":{"data":{"site":{"siteMetadata":{"title":"개미의 개발노트","author":"ugaemi","siteUrl":"http://ugaemi.com","comment":{"disqusShortName":"","utterances":"ugaemi/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"d35c59b7-90a3-56b2-957e-df323c5d3d5d","excerpt":"문제 You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it. 풀이 1 가장 쉽게 떠올릴 수 있는 Brute Force…","html":"<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<blockquote>\n<p>You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.</p>\n</blockquote>\n<h2 id=\"풀이-1\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-1\" aria-label=\"풀이 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%ED%92%80%EC%9D%B4-1\" aria-label=\"풀이 1 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List<span class=\"token punctuation\">,</span> Optional\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">mergeKLists</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> lists<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Brute Force\n\n        Time complexity: O(N log N)\n        Space complexity: O(N)\n        \"\"\"</span>\n        self<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        head <span class=\"token operator\">=</span> point <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> l <span class=\"token keyword\">in</span> lists<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> l<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n                l <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            point<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n            point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span></code></pre></div>\n<p>가장 쉽게 떠올릴 수 있는 Brute Force 방식이라 할 수 있다.</p>\n<p>리스트를 돌면서 새로운 리스트에 값을 추가하고 <code class=\"language-text\">sorted()</code> 함수를 이용해 리스트를 정렬한 후 새로운 연결 리스트를 만드는 방식이다.</p>\n<p>위 방법의 시간 복잡도는 <code class=\"language-text\">sorted()</code> 함수로 정렬을 하기 때문에 O(N log N)이며, 공간 복잡도는 O(N)이다.</p>\n<p>여기서 말하는 <code class=\"language-text\">N</code>은 리스트의 길이가 아닌 파라미터로 받은 모든 연결리스트 노드의 합이다.</p>\n<p>연결 리스트를 정렬할 수 있는 방법 중 시간 복잡도를 줄일 수 있는 방식이 무엇이 있을까? 답은 힙이다.</p>\n<h2 id=\"풀이-2\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-2\" aria-label=\"풀이 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%ED%92%80%EC%9D%B4-2\" aria-label=\"풀이 2 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 2</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List<span class=\"token punctuation\">,</span> Optional\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">mergeKLists</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> lists<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>ListNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Optimize Approach 2 by heapq\n        \"\"\"</span>\n        h <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> l <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> l<span class=\"token punctuation\">]</span>\n        heapq<span class=\"token punctuation\">.</span>heapify<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n        head <span class=\"token operator\">=</span> cur <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> h<span class=\"token punctuation\">:</span>\n            val<span class=\"token punctuation\">,</span> idx <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>\n            cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            node <span class=\"token operator\">=</span> lists<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lists<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">:</span>\n                heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span></code></pre></div>\n<p>python의 <code class=\"language-text\">heapq</code> 모듈은 우선순위 알고리즘의 구현을 제공한다.</p>\n<p>우선순위 큐 알고리즘을 구현한 모듈로는 <code class=\"language-text\">priorityQueue</code>도 있는데, 이 모듈 또한 <code class=\"language-text\">heapq</code> 모듈을 기반으로 만들어졌지만 둘은 Thread-safe 지원 여부에 따라 다르다.\n<code class=\"language-text\">priorityQueue</code>는 멀티 쓰레드 환경에서 데이터를 안전하게 교환해야 하는 경우 유용하며, <code class=\"language-text\">heapq</code>는 이러한 Thread-safe 를 지원하지는 않는다.\n락킹을 하지 않기 때문에 <code class=\"language-text\">heapq</code>의 속도가 더 빠른 장점이 있으며, 사실상 멀티 쓰레드 환경에서 개발하는 것이 아닌 경우에는 <code class=\"language-text\">heapq</code>를 대부분 사용한다.</p>\n<p>힙(min heap)은 모든 부모 노드가 자식보다 작거나 같은 값을 갖는 이진 트리이기 때문에, 우리는 이 힙을 사용해서 연결 리스트를 오름차순으로 정렬하여 사용할 수 있다.\n<code class=\"language-text\">heapq</code> 모듈의 <code class=\"language-text\">heapify()</code> 함수를 통해 힙큐를 만들 수 있으며, <code class=\"language-text\">heappop()</code>을 통해 힙큐에서 가장 작은 요소를 꺼낼 수 있다.</p>\n<p>먼저 리스트를 힙큐로 만든 다음 요소가 없어질 때까지 반복하며 힙큐에서 요소를 꺼낸다.\n꺼낸 요소는 연결 리스트에 추가하며, 기존 리스트에서 다음 노드를 가져와 힙큐에 넣는다.\n힙큐에 남은 요소가 없으면 만들어진 연결 리스트의 두번째 노드(<code class=\"language-text\">head.next</code>)를 리턴해주면 된다.</p>\n<p>이렇게 구현을 할 경우, 시간 복잡도는 <code class=\"language-text\">O(N log k)</code>로 모든 리스트를 돌았을 때보다 단축된 시간으로 정답을 구할 수 있다.</p>\n<p>모든 경우에 <code class=\"language-text\">sorted()</code>보다 힙을 이용한 정렬이 빠른 것은 아니지만, 이와 같이 내부 순서를 보존하며 삽입을 하는 경우에는 힙큐를 활용하는 것이 더 효율적인 방법이다.  </p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://leetcode.com/problems/merge-k-sorted-lists/\">LeetCode</a></li>\n<li><a href=\"https://docs.python.org/ko/3/library/heapq.html\">Python Documentation</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/algorithm/Merge-K-Sorted-Lists/#%EB%AC%B8%EC%A0%9C\">문제</a></li>\n<li><a href=\"/algorithm/Merge-K-Sorted-Lists/#%ED%92%80%EC%9D%B4-1\">풀이 1</a></li>\n<li><a href=\"/algorithm/Merge-K-Sorted-Lists/#%ED%92%80%EC%9D%B4-2\">풀이 2</a></li>\n<li><a href=\"/algorithm/Merge-K-Sorted-Lists/#references\">References</a></li>\n</ul>","frontmatter":{"title":"🧠 Merge K Sorted Lists","date":"July 04, 2022"}}},"pageContext":{"slug":"/algorithm/Merge-K-Sorted-Lists/","previous":{"fields":{"slug":"/github/Github-Actions-CI/"},"frontmatter":{"title":"🐱 github actions를 활용한 테스트 자동화 도입기","category":"Github","draft":false}},"next":null}},"staticQueryHashes":["3128451518","96099027"]}