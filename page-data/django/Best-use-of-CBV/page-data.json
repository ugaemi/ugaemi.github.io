{"componentChunkName":"component---src-templates-blog-post-js","path":"/django/Best-use-of-CBV/","result":{"data":{"site":{"siteMetadata":{"title":"개미의 개발노트","author":"ugaemi","siteUrl":"http://ugaemi.com","comment":{"disqusShortName":"","utterances":"ugaemi/blog-comments"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a1335db1-1e09-5ef2-bc7e-d6f3cca70283","excerpt":"Django에는 CBV, FBV 두 종류의 뷰가 존재한다.\n특히 클래스 기반 뷰는 장고에서 기본적으로 제공하는 제네릭 뷰를 상속해서 사용하면 여러가지 기능을 매우 편리하게 사용할 수 있다. 나는 대부분 함수 기반 뷰로만 작성을 해왔는데 CBV를 잘 활용한 코드가 훨씬 깔끔하고 직관적이라 느껴져 최대한 장고에서 지원해주는 뷰를 잘 사용해보기로 했다.\n이번 포스팅은  1…","html":"<p>Django에는 CBV, FBV 두 종류의 뷰가 존재한다.\n특히 클래스 기반 뷰는 장고에서 기본적으로 제공하는 제네릭 뷰를 상속해서 사용하면 여러가지 기능을 매우 편리하게 사용할 수 있다.</p>\n<p>나는 대부분 함수 기반 뷰로만 작성을 해왔는데 CBV를 잘 활용한 코드가 훨씬 깔끔하고 직관적이라 느껴져 최대한 장고에서 지원해주는 뷰를 잘 사용해보기로 했다.\n이번 포스팅은 <code class=\"language-text\">Two Scoops of Django</code> 10장을 읽고 중요한 내용을 정리한 글이다. 더 자세한 내용은 책을 참고하시면 좋다.</p>\n<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>장고는 클래스 기반 뷰를 작성하는 표준화된 방법을 제공한다.\n함수 기반 뷰에서는 뷰 함수 자체가 내장 함수이고, 클래스 기반 뷰에서는 뷰 클래스가 내장 함수를 반환하는 <code class=\"language-text\">as_view()</code> 클래스 메서드를 제공한다.\n<code class=\"language-text\">django.views.generic.View</code>에서 해당 메커니즘이 구현되며 모든 클래스 기반 뷰는 이 클래스를 직간접적으로 상속받아 이용한다.\n또한 장고는 요즘 대부분의 웹 프로젝트에서 이용되는 제네릭 클래스 기반 뷰(GGBV)를 제공하며, 그 장점을 최대한 살리고 있다.</p>\n<blockquote>\n<p>장고의 기본형을 보면 제네릭 클래스 기반 뷰를 위한 중요한 믹스인들이 빠져 있다.\n하지만 <code class=\"language-text\">django-braces</code> 라이브러리를 이용함으로써 이런 부분들을 해결할 수 있다.\n<code class=\"language-text\">django-braces</code> 라이브러리는 장고의 제네릭 클래스 기반 뷰를 매우 쉽고 빠르게 개발하기 위한 명확한 믹스인들을 제공하고 있다.</p>\n</blockquote>\n<h2 id=\"클래스-기반-뷰를-이용할-때의-가이드라인\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%A0-%EB%95%8C%EC%9D%98-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%9D%BC%EC%9D%B8\" aria-label=\"클래스 기반 뷰를 이용할 때의 가이드라인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%A0-%EB%95%8C%EC%9D%98-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%9D%BC%EC%9D%B8\" aria-label=\"클래스 기반 뷰를 이용할 때의 가이드라인 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 기반 뷰를 이용할 때의 가이드라인</h2>\n<ul>\n<li>뷰 코드의 양은 적으면 적을수록 좋다.</li>\n<li>뷰 안에서 같은 코드를 반복적으로 이용하지 말자.</li>\n<li>뷰는 프레젠테이션 로직에서 관리하도록 하자. 비즈니스 로직은 모델에서 처리하자. 매우 특별한 경우는 폼에서 처리하자.</li>\n<li>뷰는 간단 명료해야 한다.</li>\n<li>403, 404, 500 에러 핸들링에 클래스 기반 뷰는 이용하지 않는다. 대신 함수 기반 뷰를 이용하자.</li>\n<li>믹스인은 간단 명료해야 한다.</li>\n</ul>\n<h2 id=\"클래스-기반-뷰와-믹스인-이용하기\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EC%99%80-%EB%AF%B9%EC%8A%A4%EC%9D%B8-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"클래스 기반 뷰와 믹스인 이용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EC%99%80-%EB%AF%B9%EC%8A%A4%EC%9D%B8-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"클래스 기반 뷰와 믹스인 이용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 기반 뷰와 믹스인 이용하기</h2>\n<p>프로그래밍에서는 믹스인이란 실체화된 클래스가 아니라 상속해 줄 기능들을 제공하는 클래스를 의미한다.\n프로그래밍 언어에서 다중 상속을 해야 할 때 믹스인을 쓰면 클래스에 더 나은 기능과 역할을 제공할 수 있다.</p>\n<p>믹스인을 이용해서 뷰 클래스를 제작할 때 케네스 러브가 제안한 상속에 관한 규칙들을 따르기로 하자.</p>\n<ol>\n<li>장고가 제공하는 기본 뷰는 항상 오른쪽으로 진행한다.</li>\n<li>믹스인은 기본 뷰에서부터 왼쪽으로 진행한다.</li>\n<li>믹스인은 파이썬의 기본 객체 타입을 상속해야만 한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> TemplateView\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FreshFruitMixin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_context_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        context <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>FreshFruitMixin<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_context_data<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        context<span class=\"token punctuation\">[</span><span class=\"token string\">'has_fresh_fruit'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> context\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FruityFlavorView</span><span class=\"token punctuation\">(</span>FreshFruitMixin<span class=\"token punctuation\">,</span> TemplateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    template_name <span class=\"token operator\">=</span> <span class=\"token string\">\"fruity_flavor.html\"</span></code></pre></div>\n<p>이 단순한 예제에서 <code class=\"language-text\">FruityFlavorView</code> 클래스는 <code class=\"language-text\">FreshFruitMixin</code>과 <code class=\"language-text\">TemplateView</code>를 둘 다 상속하고 있다.</p>\n<p><code class=\"language-text\">TemplateView</code>가 장고에서 제공하는 기본 클래스이기 때문에 가장 오른쪽에 위치하며(규칙 1), 그 왼쪽에 <code class=\"language-text\">FreshFruitMixin</code>(규칙 2)을 가져다 놓았다.\n마지막으로 <code class=\"language-text\">FreshFruitMixin</code>은 <code class=\"language-text\">object</code>를 상속하고 있다(규칙 3).</p>\n<h2 id=\"어떤-장고-제네릭-클래스-기반-뷰를-어떤-태스크에-이용할-것인가\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%A4-%EC%9E%A5%EA%B3%A0-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EB%A5%BC-%EC%96%B4%EB%96%A4-%ED%83%9C%EC%8A%A4%ED%81%AC%EC%97%90-%EC%9D%B4%EC%9A%A9%ED%95%A0-%EA%B2%83%EC%9D%B8%EA%B0%80\" aria-label=\"어떤 장고 제네릭 클래스 기반 뷰를 어떤 태스크에 이용할 것인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EC%96%B4%EB%96%A4-%EC%9E%A5%EA%B3%A0-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EB%A5%BC-%EC%96%B4%EB%96%A4-%ED%83%9C%EC%8A%A4%ED%81%AC%EC%97%90-%EC%9D%B4%EC%9A%A9%ED%95%A0-%EA%B2%83%EC%9D%B8%EA%B0%80\" aria-label=\"어떤 장고 제네릭 클래스 기반 뷰를 어떤 태스크에 이용할 것인가 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떤 장고 제네릭 클래스 기반 뷰를 어떤 태스크에 이용할 것인가?</h2>\n<table>\n<thead>\n<tr>\n<th>이름</th>\n<th>목적</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>View</td>\n<td>어디에서든 이용 가능한 기본 뷰</td>\n</tr>\n<tr>\n<td>RedirectView</td>\n<td>사용자를 다른 URL로 리다이렉트</td>\n</tr>\n<tr>\n<td>TemplateView</td>\n<td>장고 HTML 템플릿을 보여줄 때</td>\n</tr>\n<tr>\n<td>ListView</td>\n<td>객체 목록</td>\n</tr>\n<tr>\n<td>DetailView</td>\n<td>객체를 보여줄 때</td>\n</tr>\n<tr>\n<td>FormView</td>\n<td>폼 전송</td>\n</tr>\n<tr>\n<td>CreateView</td>\n<td>객체를 만들 때</td>\n</tr>\n<tr>\n<td>UpdateView</td>\n<td>객체를 업데이트할 때</td>\n</tr>\n<tr>\n<td>DeleteView</td>\n<td>객체를 삭제</td>\n</tr>\n<tr>\n<td>generic dateview</td>\n<td>시간 순서로 객체를 나열해 보여줄 때</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"장고-클래스-기반-뷰에-대한-일반적인-팁\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EA%B3%A0-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%ED%8C%81\" aria-label=\"장고 클래스 기반 뷰에 대한 일반적인 팁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EC%9E%A5%EA%B3%A0-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%ED%8C%81\" aria-label=\"장고 클래스 기반 뷰에 대한 일반적인 팁 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장고 클래스 기반 뷰에 대한 일반적인 팁</h2>\n<h3 id=\"인증된-사용자에게만-장고-클래스-기반-뷰제네릭-클래스-기반-뷰-접근-가능하게-하기\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D%EB%90%9C-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%97%90%EA%B2%8C%EB%A7%8C-%EC%9E%A5%EA%B3%A0-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0-%EC%A0%91%EA%B7%BC-%EA%B0%80%EB%8A%A5%ED%95%98%EA%B2%8C-%ED%95%98%EA%B8%B0\" aria-label=\"인증된 사용자에게만 장고 클래스 기반 뷰제네릭 클래스 기반 뷰 접근 가능하게 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EC%9D%B8%EC%A6%9D%EB%90%9C-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%97%90%EA%B2%8C%EB%A7%8C-%EC%9E%A5%EA%B3%A0-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0-%EC%A0%91%EA%B7%BC-%EA%B0%80%EB%8A%A5%ED%95%98%EA%B2%8C-%ED%95%98%EA%B8%B0\" aria-label=\"인증된 사용자에게만 장고 클래스 기반 뷰제네릭 클래스 기반 뷰 접근 가능하게 하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증된 사용자에게만 장고 클래스 기반 뷰/제네릭 클래스 기반 뷰 접근 가능하게 하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> DetailView\n\n<span class=\"token keyword\">from</span> braces<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> LoginRequiredMixin\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Flavor\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorDetailView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> DetailView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Flavor</code></pre></div>\n<h3 id=\"뷰에서-유효한-폼을-이용하여-커스텀-액션-구현하기\" style=\"position:relative;\"><a href=\"#%EB%B7%B0%EC%97%90%EC%84%9C-%EC%9C%A0%ED%9A%A8%ED%95%9C-%ED%8F%BC%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%95%A1%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"뷰에서 유효한 폼을 이용하여 커스텀 액션 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EB%B7%B0%EC%97%90%EC%84%9C-%EC%9C%A0%ED%9A%A8%ED%95%9C-%ED%8F%BC%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%95%A1%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"뷰에서 유효한 폼을 이용하여 커스텀 액션 구현하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>뷰에서 유효한 폼을 이용하여 커스텀 액션 구현하기</h3>\n<p>뷰에서 폼의 유효성 검사를 할 때 커스텀 액션을 구현하고자 한다면, <code class=\"language-text\">form_valid()</code>는 제네릭 클래스 기반 뷰가 요청을 보내는 곳에 자리잡게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> CreateView\n\n<span class=\"token keyword\">from</span> braces<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> LoginRequiredMixin\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Flavor\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorCreateView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> CreateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Flavor\n    fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'slug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scoops_remaining'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">form_valid</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 커스텀 로직이 이곳에 위치</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>FlavorCreateView<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>form_valid<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이미 체크된 폼에 대해 커스텀 로직을 적용하고 싶을 경우, <code class=\"language-text\">form_valid()</code>에 로직을 추가하면 된다.\n<code class=\"language-text\">form_valid()</code>의 반환형은 <code class=\"language-text\">django.http.HttpResponseRedirect</code>가 된다.</p>\n<h3 id=\"뷰에서-부적합한-폼을-이용하여-커스텀-액션-구현하기\" style=\"position:relative;\"><a href=\"#%EB%B7%B0%EC%97%90%EC%84%9C-%EB%B6%80%EC%A0%81%ED%95%A9%ED%95%9C-%ED%8F%BC%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%95%A1%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"뷰에서 부적합한 폼을 이용하여 커스텀 액션 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EB%B7%B0%EC%97%90%EC%84%9C-%EB%B6%80%EC%A0%81%ED%95%A9%ED%95%9C-%ED%8F%BC%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%95%A1%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"뷰에서 부적합한 폼을 이용하여 커스텀 액션 구현하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>뷰에서 부적합한 폼을 이용하여 커스텀 액션 구현하기</h3>\n<p>뷰에서 폼의 부적합성 검사를 할 때 커스텀 액션을 구현하고자 한다면, <code class=\"language-text\">form_invalid()</code>는 제네릭 클래스 기반 뷰가 요청을 보내는 곳에 자리잡게 된다.\n이 메서드는 <code class=\"language-text\">django.http.HttpResponse</code>를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> CreateView\n\n<span class=\"token keyword\">from</span> braces<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> LoginRequiredMixin\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Flavor\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorCreateView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> CreateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Flavor\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">form_invalid</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 커스텀 로직이 이곳에 위치</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>FlavorCreateView<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>form_invalid<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">form_valid()</code>에서 로직을 추가했던 것과 같은 방법으로 <code class=\"language-text\">form_invalid()</code>에서도 로직을 추가할 수 있다.</p>\n<h3 id=\"뷰-객체-이용하기\" style=\"position:relative;\"><a href=\"#%EB%B7%B0-%EA%B0%9D%EC%B2%B4-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"뷰 객체 이용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EB%B7%B0-%EA%B0%9D%EC%B2%B4-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"뷰 객체 이용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>뷰 객체 이용하기</h3>\n<p>콘텐츠를 렌더링하는 데 클래스 기반 뷰를 이용한다면 자체적인 메서드와 속성을 제공하는 뷰 객체를 이용하여 다른 메서드나 속성에서 호출이 가능하게 하는 방법을 고려해 볼 수 있다. 이런 뷰 객체들은 템플릿에서도 호출할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>functional <span class=\"token keyword\">import</span> cached_property\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> UpdateView<span class=\"token punctuation\">,</span> TemplateView\n\n<span class=\"token keyword\">from</span> braces<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> LoginRequiredMixin\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Flavor\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>tasks <span class=\"token keyword\">import</span> update_users_who_favorited\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FavoriteMixin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token decorator annotation punctuation\">@cached_property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">likes_and_favorites</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        likes <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span>likes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        favorites <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span>favorites<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"likes\"</span><span class=\"token punctuation\">:</span> likes<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"favorites\"</span><span class=\"token punctuation\">:</span> favorites<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"favorites_count\"</span><span class=\"token punctuation\">:</span> favorites<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorUpdateView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> FavoriteMixin<span class=\"token punctuation\">,</span> UpdateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Flavor\n    fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'slug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scoops_remaining'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">form_valid</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        update_users_who_favorited<span class=\"token punctuation\">(</span>\n                instance<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">,</span>\n                favorites<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>likes_and_favorites<span class=\"token punctuation\">[</span><span class=\"token string\">'favorites'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>FlavorCreateView<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>form_valid<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorDetailView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> FavoriteMixin<span class=\"token punctuation\">,</span> TemplateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Flavor</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">{% extends \"base.html\" %}\n\n{% block likes_and_favorites %}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Likes: {{ view.likes_and_favorites.likes }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Favorites: {{view.likes_and_favorites.favorites_count }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n{% endblock likes_and_favorites %}</code></pre></div>\n<h2 id=\"제네릭-클래스-기반-뷰와-폼-사용하기\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EC%99%80-%ED%8F%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"제네릭 클래스 기반 뷰와 폼 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EC%99%80-%ED%8F%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"제네릭 클래스 기반 뷰와 폼 사용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 클래스 기반 뷰와 폼 사용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>urlresolvers <span class=\"token keyword\">import</span> reverse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n\nSTATUS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flavor</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_lenght<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n    slug <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>SlugField<span class=\"token punctuation\">(</span>unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    scoops_remaining <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>STATUS<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_absolute_url</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> reverse<span class=\"token punctuation\">(</span><span class=\"token string\">\"flavors:detail\"</span><span class=\"token punctuation\">,</span> kwrags<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"slug\"</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"뷰--모델폼-예제\" style=\"position:relative;\"><a href=\"#%EB%B7%B0--%EB%AA%A8%EB%8D%B8%ED%8F%BC-%EC%98%88%EC%A0%9C\" aria-label=\"뷰  모델폼 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EB%B7%B0--%EB%AA%A8%EB%8D%B8%ED%8F%BC-%EC%98%88%EC%A0%9C\" aria-label=\"뷰  모델폼 예제 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>뷰 + 모델폼 예제</h3>\n<p>가장 단순하고 일반적인 장고 폼 시나리오다. 모델을 생성한 후 모델에 새로운 레코드를 추가하거나 기존 레코드를 수정하는 기능들이다.</p>\n<p>여기 다음 뷰들이 있다.</p>\n<ol>\n<li><code class=\"language-text\">FlavorCreateView</code> : 새로운 종류의 아이스크림을 추가하는 폼</li>\n<li><code class=\"language-text\">FlavorUpdateView</code> : 기존 아이스크림을 수정하는 폼</li>\n<li><code class=\"language-text\">FlavorDetailView</code> : 아이스크림 추가와 변경을 확정하는 폼</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> CreateView<span class=\"token punctuation\">,</span> UpdateView<span class=\"token punctuation\">,</span> DetailView\n\n<span class=\"token keyword\">from</span> braces<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> LoginRequiredMixin\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Flavor\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorCreateView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> CreateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Flavor\n    fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'slug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scoops_remaining'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorUpdateView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> UpdateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Flavor\n    fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'slug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scoops_remaining'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorDetailView</span><span class=\"token punctuation\">(</span>DetailView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Flavor</code></pre></div>\n<p>여기서 주의해야 할 점이 있다. 이 뷰들을 <code class=\"language-text\">[urls.py](http://urls.py)</code> 모듈에 연동하고 필요한 템플릿을 생성한 후 다음 문제에 봉착하게 될 것이다.</p>\n<p><strong>FlavorDetailView가 확인 페이지가 아니다.</strong></p>\n<p>문제를 해결하기 위한 첫 번째 절차는 <code class=\"language-text\">django.contrib.messages</code>를 이용하여 사용자가 방문해 아이스크림을 추가하거나 아이스크림을 변경했다는 것을 <code class=\"language-text\">FlavorDetailView</code>에 알리는 것이다.\n<code class=\"language-text\">FlavorCreateView.form_valid()</code>와 <code class=\"language-text\">FlavorUpdateView.form_valid()</code> 메서드들을 오버라이딩할 필요가 있다. 이는 <code class=\"language-text\">FlavorActionMixin</code>에서 한번에 편리하게 해결할 수 있다.</p>\n<p>이제 장고의 메시지 프레임워크를 이용하여 사용자가 성공적으로 아이템을 추가하거나 수정했을 때 확인 메시지를 보여주게 해보자.\n뷰에 확인 메시지를 보여주는 큐를 생성하는 <code class=\"language-text\">FlavorActionMixin</code>을 제작하자.</p>\n<blockquote>\n<p>믹스인은 object를 상속해야 한다.\nFlavorActionMixin은 이미 존재하는 믹스인이나 뷰를 상속하지 않고 파이썬의 object 타입을 상속한다는 점을 알아두자.\n믹스인은 가능한 한 아주 단순한 상속의 연결이 되어야 한다는 것을 잊지 말자.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> messages\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> CreateView<span class=\"token punctuation\">,</span> UpdateView<span class=\"token punctuation\">,</span> DetailView\n\n<span class=\"token keyword\">from</span> braces<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> LoginRequiredMixin\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Flavor\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorActionMixin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'slug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scoops_remaining'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">success_msg</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> NotImplemented\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">form_valid</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        message<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>success_msg<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>FlavorActionMixin<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>form_valid<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorCreateView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> FlavorActionMixin<span class=\"token punctuation\">,</span> CreateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    model <span class=\"token operator\">=</span> Flavor\n    success_msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Flavor created!\"</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorUpdateView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> FlavorActionMixin<span class=\"token punctuation\">,</span> CreateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    model <span class=\"token operator\">=</span> Flavor\n    success_msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Flavor updated!\"</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorDetailView</span><span class=\"token punctuation\">(</span>DetailView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    model <span class=\"token operator\">=</span> Flavor</code></pre></div>\n<p>종류가 생성되거나 업데이트된 후 메시지 리스트가 <code class=\"language-text\">FlavorDetailView</code>의 <code class=\"language-text\">context</code>로 전송된다. 다음 코드를 뷰의 템플릿에 추가하고 아이스크림 종류를 새로 생성하거나 업데이트하면 이제 메시지들을 볼 수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">{% if messages %}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>messages<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    {% for message in message %}\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message_{{ forloop.counter }}<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">{%</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">message.tags</span> <span class=\"token attr-name\">%}</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ message.tags }}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">{%</span> <span class=\"token attr-name\">endif</span> <span class=\"token attr-name\">%}</span><span class=\"token punctuation\">></span></span>\n        {{ messsage }}\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    {% endfor %}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n{% endif %}</code></pre></div>\n<h3 id=\"뷰--폼-예제\" style=\"position:relative;\"><a href=\"#%EB%B7%B0--%ED%8F%BC-%EC%98%88%EC%A0%9C\" aria-label=\"뷰  폼 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EB%B7%B0--%ED%8F%BC-%EC%98%88%EC%A0%9C\" aria-label=\"뷰  폼 예제 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>뷰 + 폼 예제</h3>\n<p>때때로 <code class=\"language-text\">ModelForm</code>이 아니라 장고 <code class=\"language-text\">Form</code>을 이용하고 싶을 때도 있을 것이다. 검색 폼과 같은 경우 말이다.\n이번 예제에서는 간단한 아이스크림 종류 검색 폼을 만들어 보자. HTML 폼을 만든 후 이 폼의 액션이 ORM을 쿼리하여 쿼리의 결과를 리스트로 검색 결과 페이지에 보여주도록 하겠다.\n검색 쿼리에 맞는 검색 결과를 가져오기 위해 <code class=\"language-text\">ListView</code>에서 지원하는 기본 쿼리세트를 수정해야 한다. 이를 위해 <code class=\"language-text\">ListView</code>의 <code class=\"language-text\">get_queryset()</code> 메서드를 오버라이드했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> ListView\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Flavor\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorListView</span><span class=\"token punctuation\">(</span>ListView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n\tmodel <span class=\"token operator\">=</span> Flavor\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_queryset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        queryset <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>FlavorListView<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_queryset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        q <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> q<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> queryset<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>title__icontains<span class=\"token operator\">=</span>q<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> queryset</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">{% comment %}\n  Usage: {% include \"flavors/_flavor_search.html\" %}\n{% endcomment %}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{% url 'flavor_list' %}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GET<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>q<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type\"submit\"</span><span class=\"token punctuation\">></span></span>search<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>일단 <code class=\"language-text\">ListView</code>의 <code class=\"language-text\">get_queryset()</code> 메서드를 오버라이딩했다면 나머지 부분은 일반적인 HTML 폼과 다를 게 없어진다.</p>\n<h2 id=\"djangoviewsgenericview-이용하기\" style=\"position:relative;\"><a href=\"#djangoviewsgenericview-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"djangoviewsgenericview 이용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#djangoviewsgenericview-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"djangoviewsgenericview 이용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>django.views.generic.View 이용하기</h2>\n<p>모든 뷰에서 <code class=\"language-text\">django.views.generic.View</code>만 이용하여 장고 프로젝트 전부를 구성할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> get_object_or_404\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render<span class=\"token punctuation\">,</span> redirect\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> View\n\n<span class=\"token keyword\">from</span> braces<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> LoginRequiredMixin\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> FlavorForm\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Flavor\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlavorView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span> View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        flavor <span class=\"token operator\">=</span> get_object_or_404<span class=\"token punctuation\">(</span>Flavor<span class=\"token punctuation\">,</span> slug<span class=\"token operator\">=</span>kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">'slug'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"flavors/flavor_detail.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"flavor\"</span><span class=\"token punctuation\">:</span> flavor<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        flavor <span class=\"token operator\">=</span> get_object_or_404<span class=\"token punctuation\">(</span>Flavor<span class=\"token punctuation\">,</span> slug<span class=\"token operator\">=</span>kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">'slug'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        form <span class=\"token operator\">=</span> FlavorForm<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            form<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">\"flavors:detail\"</span><span class=\"token punctuation\">,</span> flavor<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">)</span></code></pre></div>\n<p>물론 이를 함수 기반 뷰로도 만들어 이용할 수도 있다.\n하지만 <code class=\"language-text\">FlavorView</code> 안에서 GET/POST 메서드 데코레이션을 이용하는 것이 기존의 <code class=\"language-text\">if request.method ==</code>  식의  조건문을 통하는 것보다 더 낫다는 것은 좀 고민해봐야 할 것이다.\n게다가 믹스인을 이용하는 것이 훨씬 직관적이기도 하다.</p>\n<p>핵심은 객체 지향의 장점을 살린 클래스 기반 뷰와 함수 기반 뷰를 서로 조합해서 이용함으로써 그 장점을 최대한 살릴 수 있다는 것이다!</p>\n<p>이번 장을 읽으며 어떤 식으로 CBV를 활용하면 더 좋을지 감을 잡은 것 같다 :)</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li>Two Scoops of Django</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/django/Best-use-of-CBV/#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"/django/Best-use-of-CBV/#%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%A0-%EB%95%8C%EC%9D%98-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%9D%BC%EC%9D%B8\">클래스 기반 뷰를 이용할 때의 가이드라인</a></li>\n<li><a href=\"/django/Best-use-of-CBV/#%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EC%99%80-%EB%AF%B9%EC%8A%A4%EC%9D%B8-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\">클래스 기반 뷰와 믹스인 이용하기</a></li>\n<li><a href=\"/django/Best-use-of-CBV/#%EC%96%B4%EB%96%A4-%EC%9E%A5%EA%B3%A0-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EB%A5%BC-%EC%96%B4%EB%96%A4-%ED%83%9C%EC%8A%A4%ED%81%AC%EC%97%90-%EC%9D%B4%EC%9A%A9%ED%95%A0-%EA%B2%83%EC%9D%B8%EA%B0%80\">어떤 장고 제네릭 클래스 기반 뷰를 어떤 태스크에 이용할 것인가?</a></li>\n<li>\n<p><a href=\"/django/Best-use-of-CBV/#%EC%9E%A5%EA%B3%A0-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%ED%8C%81\">장고 클래스 기반 뷰에 대한 일반적인 팁</a></p>\n<ul>\n<li><a href=\"/django/Best-use-of-CBV/#%EC%9D%B8%EC%A6%9D%EB%90%9C-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%97%90%EA%B2%8C%EB%A7%8C-%EC%9E%A5%EA%B3%A0-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0-%EC%A0%91%EA%B7%BC-%EA%B0%80%EB%8A%A5%ED%95%98%EA%B2%8C-%ED%95%98%EA%B8%B0\">인증된 사용자에게만 장고 클래스 기반 뷰/제네릭 클래스 기반 뷰 접근 가능하게 하기</a></li>\n<li><a href=\"/django/Best-use-of-CBV/#%EB%B7%B0%EC%97%90%EC%84%9C-%EC%9C%A0%ED%9A%A8%ED%95%9C-%ED%8F%BC%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%95%A1%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\">뷰에서 유효한 폼을 이용하여 커스텀 액션 구현하기</a></li>\n<li><a href=\"/django/Best-use-of-CBV/#%EB%B7%B0%EC%97%90%EC%84%9C-%EB%B6%80%EC%A0%81%ED%95%A9%ED%95%9C-%ED%8F%BC%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%95%A1%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\">뷰에서 부적합한 폼을 이용하여 커스텀 액션 구현하기</a></li>\n<li><a href=\"/django/Best-use-of-CBV/#%EB%B7%B0-%EA%B0%9D%EC%B2%B4-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\">뷰 객체 이용하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/django/Best-use-of-CBV/#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0%EC%99%80-%ED%8F%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">제네릭 클래스 기반 뷰와 폼 사용하기</a></p>\n<ul>\n<li><a href=\"/django/Best-use-of-CBV/#%EB%B7%B0--%EB%AA%A8%EB%8D%B8%ED%8F%BC-%EC%98%88%EC%A0%9C\">뷰 + 모델폼 예제</a></li>\n<li><a href=\"/django/Best-use-of-CBV/#%EB%B7%B0--%ED%8F%BC-%EC%98%88%EC%A0%9C\">뷰 + 폼 예제</a></li>\n</ul>\n</li>\n<li><a href=\"/django/Best-use-of-CBV/#djangoviewsgenericview-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\">django.views.generic.View 이용하기</a></li>\n<li><a href=\"/django/Best-use-of-CBV/#references\">References</a></li>\n</ul>","frontmatter":{"title":"🔫 클래스 기반 뷰의 모범적인 이용","date":"March 21, 2020"}}},"pageContext":{"slug":"/django/Best-use-of-CBV/","previous":{"fields":{"slug":"/retrospect/2019/"},"frontmatter":{"title":"🐧 2019 회고","category":"Retrospect","draft":false}},"next":{"fields":{"slug":"/django/Basic-of-django-form/"},"frontmatter":{"title":"🔫 장고 폼의 기초","category":"Django","draft":false}}}},"staticQueryHashes":["3128451518","96099027"]}